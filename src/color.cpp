#include "color.h"

const uint8_t hsv_sweep_r[400] PROGMEM =
{
	0xFF, 0xFD, 0xFB, 0xFA, 0xF8, 0xF7, 0xF5, 0xF3, 0xF2, 0xF0, 
	0xEF, 0xED, 0xEB, 0xEA, 0xE8, 0xE7, 0xE5, 0xE3, 0xE2, 0xE0, 
	0xDF, 0xDD, 0xDB, 0xDA, 0xD8, 0xD7, 0xD5, 0xD3, 0xD2, 0xD0, 
	0xCF, 0xCD, 0xCB, 0xCA, 0xC8, 0xC7, 0xC5, 0xC3, 0xC2, 0xC0, 
	0xBF, 0xBD, 0xBB, 0xBA, 0xB8, 0xB7, 0xB5, 0xB3, 0xB2, 0xB0, 
	0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
	0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
	0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
	0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
	0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
	0xAF, 0xAB, 0xA8, 0xA4, 0xA1, 0x9D, 0x9A, 0x96, 0x93, 0x8F, 
	0x8C, 0x88, 0x85, 0x81, 0x7E, 0x7A, 0x77, 0x73, 0x70, 0x6C, 
	0x69, 0x65, 0x62, 0x5E, 0x5B, 0x57, 0x54, 0x50, 0x4D, 0x49, 
	0x45, 0x42, 0x3F, 0x3B, 0x38, 0x34, 0x30, 0x2D, 0x2A, 0x26, 
	0x23, 0x1F, 0x1C, 0x18, 0x15, 0x11, 0x0E, 0x0A, 0x07, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x03, 0x04, 0x06, 0x08, 0x09, 0x0B, 0x0D, 0x0E, 
	0x10, 0x12, 0x13, 0x15, 0x16, 0x18, 0x1A, 0x1B, 0x1D, 0x1F, 
	0x20, 0x22, 0x24, 0x25, 0x27, 0x29, 0x2A, 0x2C, 0x2D, 0x2F, 
	0x31, 0x32, 0x34, 0x36, 0x37, 0x39, 0x3B, 0x3C, 0x3E, 0x3F, 
	0x41, 0x43, 0x44, 0x46, 0x48, 0x49, 0x4B, 0x4D, 0x4E, 0x50, 
	0x52, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D, 0x5F, 0x60, 0x62, 
	0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6D, 0x6F, 0x71, 0x73, 0x75, 
	0x77, 0x79, 0x7A, 0x7C, 0x7E, 0x80, 0x82, 0x84, 0x86, 0x87, 
	0x89, 0x8B, 0x8D, 0x8F, 0x91, 0x93, 0x94, 0x96, 0x98, 0x9A, 
	0x9C, 0x9E, 0xA0, 0xA1, 0xA3, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 
	0xAF, 0xB0, 0xB2, 0xB3, 0xB5, 0xB7, 0xB8, 0xBA, 0xBB, 0xBD, 
	0xBF, 0xC0, 0xC2, 0xC3, 0xC5, 0xC7, 0xC8, 0xCA, 0xCB, 0xCD, 
	0xCF, 0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 
	0xDF, 0xE0, 0xE2, 0xE3, 0xE5, 0xE7, 0xE8, 0xEA, 0xEB, 0xED, 
	0xEF, 0xF0, 0xF2, 0xF3, 0xF5, 0xF7, 0xF8, 0xFA, 0xFB, 0xFD
};

const uint8_t hsv_sweep_g[400] PROGMEM =
{
	0x00, 0x01, 0x03, 0x04, 0x06, 0x08, 0x09, 0x0B, 0x0D, 0x0E, 
	0x10, 0x12, 0x13, 0x15, 0x16, 0x18, 0x1A, 0x1B, 0x1D, 0x1F, 
	0x20, 0x22, 0x24, 0x25, 0x27, 0x29, 0x2A, 0x2C, 0x2D, 0x2F, 
	0x31, 0x32, 0x34, 0x36, 0x37, 0x39, 0x3B, 0x3C, 0x3E, 0x3F, 
	0x41, 0x43, 0x44, 0x46, 0x48, 0x49, 0x4B, 0x4D, 0x4E, 0x50, 
	0x52, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D, 0x5F, 0x60, 0x62, 
	0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6D, 0x6F, 0x71, 0x73, 0x75, 
	0x77, 0x79, 0x7A, 0x7C, 0x7E, 0x80, 0x82, 0x84, 0x86, 0x87, 
	0x89, 0x8B, 0x8D, 0x8F, 0x91, 0x93, 0x94, 0x96, 0x98, 0x9A, 
	0x9C, 0x9E, 0xA0, 0xA1, 0xA3, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 
	0xAF, 0xB0, 0xB2, 0xB3, 0xB5, 0xB7, 0xB8, 0xBA, 0xBB, 0xBD, 
	0xBF, 0xC0, 0xC2, 0xC3, 0xC5, 0xC7, 0xC8, 0xCA, 0xCB, 0xCD, 
	0xCF, 0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 
	0xDF, 0xE0, 0xE2, 0xE3, 0xE5, 0xE7, 0xE8, 0xEA, 0xEB, 0xED, 
	0xEF, 0xF0, 0xF2, 0xF3, 0xF5, 0xF7, 0xF8, 0xFA, 0xFB, 0xFD, 
	0xFF, 0xFD, 0xFB, 0xFA, 0xF8, 0xF7, 0xF5, 0xF3, 0xF2, 0xF0, 
	0xEF, 0xED, 0xEB, 0xEA, 0xE8, 0xE7, 0xE5, 0xE3, 0xE2, 0xE0, 
	0xDF, 0xDD, 0xDB, 0xDA, 0xD8, 0xD7, 0xD5, 0xD3, 0xD2, 0xD0, 
	0xCF, 0xCD, 0xCB, 0xCA, 0xC8, 0xC7, 0xC5, 0xC3, 0xC2, 0xC0, 
	0xBF, 0xBD, 0xBB, 0xBA, 0xB8, 0xB7, 0xB5, 0xB3, 0xB2, 0xB0, 
	0xAF, 0xAB, 0xA8, 0xA4, 0xA1, 0x9D, 0x9A, 0x96, 0x93, 0x8F, 
	0x8C, 0x88, 0x85, 0x81, 0x7E, 0x7A, 0x77, 0x73, 0x70, 0x6C, 
	0x69, 0x65, 0x62, 0x5E, 0x5B, 0x57, 0x54, 0x50, 0x4D, 0x49, 
	0x45, 0x42, 0x3F, 0x3B, 0x38, 0x34, 0x30, 0x2D, 0x2A, 0x26, 
	0x23, 0x1F, 0x1C, 0x18, 0x15, 0x11, 0x0E, 0x0A, 0x07, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t hsv_sweep_b[400] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x03, 0x04, 0x06, 0x08, 0x09, 0x0B, 0x0D, 0x0E, 
	0x10, 0x12, 0x13, 0x15, 0x16, 0x18, 0x1A, 0x1B, 0x1D, 0x1F, 
	0x20, 0x22, 0x24, 0x25, 0x27, 0x29, 0x2A, 0x2C, 0x2D, 0x2F, 
	0x31, 0x32, 0x34, 0x36, 0x37, 0x39, 0x3B, 0x3C, 0x3E, 0x3F, 
	0x41, 0x43, 0x44, 0x46, 0x48, 0x49, 0x4B, 0x4D, 0x4E, 0x50, 
	0x52, 0x55, 0x58, 0x5C, 0x5F, 0x63, 0x66, 0x6A, 0x6D, 0x71, 
	0x74, 0x78, 0x7B, 0x7E, 0x82, 0x85, 0x89, 0x8C, 0x90, 0x93, 
	0x97, 0x9A, 0x9E, 0xA1, 0xA5, 0xA8, 0xAB, 0xAF, 0xB2, 0xB6, 
	0xB9, 0xBD, 0xC0, 0xC4, 0xC7, 0xCB, 0xCE, 0xD2, 0xD5, 0xD8, 
	0xDC, 0xDF, 0xE3, 0xE6, 0xEA, 0xED, 0xF1, 0xF4, 0xF8, 0xFB, 
	0xFF, 0xFD, 0xFB, 0xFA, 0xF8, 0xF7, 0xF5, 0xF3, 0xF2, 0xF0, 
	0xEF, 0xED, 0xEB, 0xEA, 0xE8, 0xE7, 0xE5, 0xE3, 0xE2, 0xE0, 
	0xDF, 0xDD, 0xDB, 0xDA, 0xD8, 0xD7, 0xD5, 0xD3, 0xD2, 0xD0, 
	0xCF, 0xCD, 0xCB, 0xCA, 0xC8, 0xC7, 0xC5, 0xC3, 0xC2, 0xC0, 
	0xBF, 0xBD, 0xBB, 0xBA, 0xB8, 0xB7, 0xB5, 0xB3, 0xB2, 0xB0, 
	0xAF, 0xAD, 0xAB, 0xA9, 0xA7, 0xA5, 0xA3, 0xA1, 0xA0, 0x9E, 
	0x9C, 0x9A, 0x98, 0x96, 0x94, 0x93, 0x91, 0x8F, 0x8D, 0x8B, 
	0x89, 0x87, 0x86, 0x84, 0x82, 0x80, 0x7E, 0x7C, 0x7A, 0x79, 
	0x77, 0x75, 0x73, 0x71, 0x6F, 0x6D, 0x6C, 0x6A, 0x68, 0x66, 
	0x64, 0x62, 0x60, 0x5F, 0x5D, 0x5B, 0x59, 0x57, 0x55, 0x53, 
	0x52, 0x50, 0x4E, 0x4D, 0x4B, 0x49, 0x48, 0x46, 0x44, 0x43, 
	0x41, 0x3F, 0x3E, 0x3C, 0x3B, 0x39, 0x37, 0x36, 0x34, 0x32, 
	0x31, 0x2F, 0x2D, 0x2C, 0x2A, 0x29, 0x27, 0x25, 0x24, 0x22, 
	0x20, 0x1F, 0x1D, 0x1B, 0x1A, 0x18, 0x16, 0x15, 0x13, 0x12, 
	0x10, 0x0E, 0x0D, 0x0B, 0x09, 0x08, 0x06, 0x04, 0x03, 0x01
};

const uint8_t sine_full[100] PROGMEM =
{
	0x00, 0x00, 0x01, 0x02, 0x04, 0x06, 0x08, 0x0C, 0x0F, 0x13, 
	0x18, 0x1D, 0x22, 0x28, 0x2E, 0x34, 0x3B, 0x42, 0x49, 0x50, 
	0x58, 0x5F, 0x67, 0x6F, 0x77, 0x7F, 0x87, 0x8F, 0x97, 0x9F, 
	0xA6, 0xAE, 0xB5, 0xBC, 0xC3, 0xCA, 0xD0, 0xD6, 0xDC, 0xE1, 
	0xE6, 0xEB, 0xEF, 0xF2, 0xF5, 0xF8, 0xFA, 0xFC, 0xFD, 0xFE, 
	0xFF, 0xFE, 0xFD, 0xFC, 0xFA, 0xF8, 0xF6, 0xF2, 0xEF, 0xEB, 
	0xE6, 0xE1, 0xDC, 0xD6, 0xD0, 0xCA, 0xC3, 0xBC, 0xB5, 0xAE, 
	0xA6, 0x9F, 0x97, 0x8F, 0x87, 0x7F, 0x77, 0x6F, 0x67, 0x5F, 
	0x58, 0x50, 0x49, 0x42, 0x3B, 0x34, 0x2E, 0x28, 0x22, 0x1D, 
	0x18, 0x13, 0x0F, 0x0C, 0x09, 0x06, 0x04, 0x02, 0x01, 0x00
};

const uint8_t sine_half[100] PROGMEM =
{
	0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0x07, 0x09, 
	0x0C, 0x0E, 0x11, 0x14, 0x17, 0x1A, 0x1D, 0x21, 0x24, 0x28, 
	0x2C, 0x30, 0x33, 0x37, 0x3B, 0x3F, 0x43, 0x47, 0x4B, 0x4F, 
	0x53, 0x57, 0x5B, 0x5E, 0x62, 0x65, 0x68, 0x6B, 0x6E, 0x71, 
	0x73, 0x75, 0x78, 0x79, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x7F, 
	0x80, 0x7F, 0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x79, 0x78, 0x76, 
	0x73, 0x71, 0x6E, 0x6B, 0x68, 0x65, 0x62, 0x5E, 0x5B, 0x57, 
	0x53, 0x4F, 0x4C, 0x48, 0x44, 0x40, 0x3C, 0x38, 0x34, 0x30, 
	0x2C, 0x28, 0x24, 0x21, 0x1D, 0x1A, 0x17, 0x14, 0x11, 0x0E, 
	0x0C, 0x0A, 0x07, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00
};

const uint8_t static_color_r[10] PROGMEM =
{
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF
};

const uint8_t static_color_g[10] PROGMEM =
{
	0x00, 0x32, 0x7D, 0xFF, 0xFF, 0xFF, 0x7D, 0x00, 0x00, 0x00
};

const uint8_t static_color_b[10] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x80
};

/*
Animation or color scheme functions. First argument
determines the progression, second - the color channel.
Third argument points to the output of the function.
*/

void neon_scheme(uint16_t v, const uint8_t c, color24* output)
{
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//channel colors
	switch(c)
	{
		case channel1:
			output -> r = 0x80;
			output -> b = 0xFF;
			break;
		case channel2:
			output -> g = 0xFF;
			output -> b = 0x80;
			break;
		case channel3:
			output -> g = 0x80;
			output -> b = 0xFF;
			break;
		case channel4:
			output -> r = 0xFF;
			output -> b = 0x80;
			break;
		case channel5:
			output -> g = 0xFF;
			break;
		case channel6:
			output -> r = 0xFF;
			output -> g = 0x80;
			break;
		default:
			break;
	}
}

void neon_blink(uint16_t v, const uint8_t c, color24* output)
{
	//temporary channel bitmask
	uint8_t ct = c;
	//only selected channels lit up, use bitmasks
	switch(v)
	{
		case 101 ... 120:
			ct &= 0b00000001;
			break;
		case 121 ... 140:
			ct &= 0b00000010;
			break; 
		case 141 ... 160:
			ct &= 0b00000100;
			break;
		case 161 ... 180:
			ct &= 0b00001000;
			break;
		case 181 ... 200:
			ct &= 0b00010000;
			break;
		case 201 ... 210:
			ct &= 0b00100000;
			break;
		case 211 ... 220:
			ct &= 0b00110000;
			break;
		case 221 ... 230:
			ct &= 0b00111000;
			break;
		case 231 ... 240:
			ct &= 0b00111100;
			break;
		case 241 ... 250:
			ct &= 0b00111110;
			break;
		case 251 ... 300:
			ct &= 0b00111111;
			break;
		case 301 ... 320:
			ct &= 0b00110000;
			break;
		case 321 ... 340:
			ct &= 0b00001000;
			break;
		case 341 ... 360:
			ct &= 0b00000110;
			break;
		case 361 ... 380:
			ct &= 0b00000001;
			break;
		default:
			break;
	}
	//perform rendering
	neon_scheme(v, ct, output);
}

void hsv_sweep(uint16_t v, const uint8_t c, color24* output)
{
	output -> r = pgm_read_byte(&hsv_sweep_r[v]);
	output -> g = pgm_read_byte(&hsv_sweep_g[v]);
	output -> b = pgm_read_byte(&hsv_sweep_b[v]);
}

void hsv_river(uint16_t v, const uint8_t c, color24* output)
{
	#define offset(a) 50*a
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//color channels
	switch(c)
	{
		case channel1:
			v += offset(5);
			break;
		case channel2:
			v += offset(4);
			break;
		case channel3:
			v += offset(3);
			break;
		case channel4:
			v += offset(2);
			break;
		case channel5:
			v += offset(1);
			break;
		default:
			break;
	}
	//wrap around
	if(v > 399) v -= 399;
	//output color
	hsv_sweep(v, c, output);
}

void hsv_volcano(uint16_t v, const uint8_t c, color24* output)
{
	#define offset(a) 50*a
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//color channels
	switch(c)
	{
		case channel2:
			v += offset(1);
			break;
		case channel3:
			v += offset(2);
			break;
		case channel4:
			v += offset(3);
			break;
		case channel5:
			v += offset(2);
			break;
		case channel6:
			v += offset(1);
			break;
		default:
			break;
	}
	//wrap around
	if(v > 399) v -= 399;
	//output color
	hsv_sweep(v, c, output);
}

void miami_sheen(uint16_t v, const uint8_t c, color24* output)
{
	#define sec1_end 99
	#define dark1 110
	#define sec2_beg 110
	#define sec2_end 209
	#define dark2 220
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//color channels
	switch(c)
	{
		case channel5:
			v += 10;
			break;
		case channel4:
			v += 20;
			break;
		case channel3:
			v += 30;
			break;
		case channel2:
			v += 40;
			break;
		case channel1:
			v += 50;
			break;
		default:
			break;
	}
	//wrap around
	if(v > dark2) v -= dark2;
	//first part, pink
	if(v <= sec1_end)
	{
		output -> r = pgm_read_byte(&sine_full[v]);
		output -> b = pgm_read_byte(&sine_half[v]);
	}
	//second part, cyan
	else if(v > sec2_beg && v < sec2_end)
	{
		uint16_t vt = v - sec2_beg;
		output -> g = pgm_read_byte(&sine_full[vt]);
		output -> b = pgm_read_byte(&sine_full[vt]);
	}
}

void toxic_sheen(uint16_t v, const uint8_t c, color24* output)
{
	#define sec1_end 99
	#define dark1 110
	#define sec2_beg 110
	#define sec2_end 209
	#define dark2 220
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//color channels
	switch(c)
	{
		case channel5:
			v += 10;
			break;
		case channel4:
			v += 20;
			break;
		case channel3:
			v += 30;
			break;
		case channel2:
			v += 40;
			break;
		case channel1:
			v += 50;
			break;
		default:
			break;
	}
	//wrap around
	if(v > dark2) v -= dark2;
	//first part, green
	if(v <= sec1_end)
		output -> g = pgm_read_byte(&sine_full[v]);
	//second part, purple
	else if(v > sec2_beg && v < sec2_end)
	{
		uint16_t vt = v - sec2_beg;
		output -> r = pgm_read_byte(&sine_half[vt]);
		output -> b = pgm_read_byte(&sine_full[vt]);
	}
}

void cyber_sheen(uint16_t v, const uint8_t c, color24* output)
{
	#define sec1_end 99
	#define dark1 110
	#define sec2_beg 110
	#define sec2_end 209
	#define dark2 220
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//color channels
	switch(c)
	{
		case channel5:
			v += 10;
			break;
		case channel4:
			v += 20;
			break;
		case channel3:
			v += 30;
			break;
		case channel2:
			v += 40;
			break;
		case channel1:
			v += 50;
			break;
		default:
			break;
	}
	//wrap around
	if(v > dark2) v -= dark2;
	//first part, yellow
	if(v <= sec1_end)
	{
		output -> r = pgm_read_byte(&sine_full[v]);
		output -> g = pgm_read_byte(&sine_half[v]);
	}
	//second part, blue
	else if(v > sec2_beg && v < sec2_end)
	{
		uint16_t vt = v - sec2_beg;
		output -> g = pgm_read_byte(&sine_half[vt]);
		output -> b = pgm_read_byte(&sine_full[vt]);
	}
}

uint8_t pong_bitmask(uint16_t v, const uint8_t c)
{
	//temporary channel bitmask
	uint8_t ct = c;
	//make it periodic
	v %= 141;
	//only selected channels lit up, use bitmasks
	switch(v)
	{
		case 0 ... 10:
			ct &= 0b00000001;
			break;
		case 11 ... 20:
			ct &= 0b00000010;
			break; 
		case 21 ... 30:
			ct &= 0b00000100;
			break;
		case 31 ... 40:
			ct &= 0b00001000;
			break;
		case 41 ... 50:
			ct &= 0b00010000;
			break;
		case 51 ... 60:
			ct &= 0b00100000;
			break;
		case 61 ... 70:
			ct &= 0b00000000;
			break;
		case 71 ... 80:
			ct &= 0b00100000;
			break;
		case 81 ... 90:
			ct &= 0b00010000;
			break;
		case 91 ... 100:
			ct &= 0b00001000;
			break;
		case 101 ... 110:
			ct &= 0b00000100;
			break;
		case 111 ... 120:
			ct &= 0b00000010;
			break;
		case 121 ... 130:
			ct &= 0b00000001;
			break;
		case 131 ... 140:
			ct &= 0b00000000;
			break;
	}
	return ct;
}

void pong_multicolor(uint16_t v, const uint8_t c, color24* output)
{
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//apply bitmasks for selected channels
	uint8_t ct = pong_bitmask(v, c);
	//exit if no channel specified
	if(!ct) return;
	//apply correct colors
	switch(v)
	{
		//red
		case 0 ... 70:
			output -> r = 0xFF;
			break;
		//orange
		case 71 ... 140:
			output -> r = 0xFF;
			output -> g = 0x40;
			break;
		//yellow
		case 141 ... 210:
			output -> r = 0xFF;
			output -> g = 0x80;
			break;
		//green
		case 211 ... 280:
			output -> g = 0xFF;
			break;
		//cyan
		case 281 ... 350:
			output -> g = 0xFF;
			output -> b = 0x80;
			break;
		//blue
		case 351 ... 420:
			output -> b = 0xFF;
			break;
		//violet
		case 421 ... 490:
			output -> r = 0x80;
			output -> b = 0xFF;
			break;
		//pink
		case 491 ... 560:
			output -> r = 0xFF;
			output -> b = 0x80;
			break;
	}
}

void pong_white(uint16_t v, const uint8_t c, color24* output)
{
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//apply bitmasks for selected channels
	uint8_t ct = pong_bitmask(v, c);
	//exit if no channel specified
	if(!ct) return;
	output -> r = 0xFF;
	output -> g = 0xFF;
	output -> b = 0xFF;
}

void pong_magma(uint16_t v, const uint8_t c, color24* output)
{
	//prepare output register
	output -> r = 0;
	output -> g = 0;
	output -> b = 0;
	//apply bitmasks for selected channels
	uint8_t ct = pong_bitmask(v, c);
	//exit if no channel specified
	if(!ct) return;
	//apply colors
	switch(v)
	{
		//orange
		case 0 ... 70:
			output -> r = 0xFF;
			output -> g = 0x20;
			break;
		case 71 ... 140:
			output -> g = 0xFF;
			output -> b = 0xC0;
			break;
	}
}

void static_color(uint8_t index, color24* output)
{
	output -> r = pgm_read_byte(&static_color_r[index]);
	output -> g = pgm_read_byte(&static_color_g[index]);
	output -> b = pgm_read_byte(&static_color_b[index]);
}
